#!/bin/bash
# INDENTING (emacs/vi): -*- mode:bash; tab-width:2; c-basic-offset:2; intent-tabs-mode:nil; -*- ex: set tabstop=2 expandtab smartindent shiftwidth=2:


## Check invocation
[ "${BASH_LINENO[0]}" == "0" ] && cat << EOF && exit 1
ERROR: This script MUST be sourced
USAGE: source ${0} <author-name> <author-email> [<root-path>=/etc/gcfg]
EOF


## Usage
[ $# -lt 2 -o "${1##*-}" == 'help' ] && cat << EOF && return 1
USAGE: source ${BASH_SOURCE[0]} <author-name> <author-email> [<root-path>=/etc/gcfg]

SYNOPSIS:
  Configure the configuration utility and repository.
EOF


## Arguments
export GCFG_AUTHOR="$1"
export GCFG_EMAIL="$2"
[ $# -ge 3 ] && export GCFG_ROOT="$3"


## Functions
source gcfg.functions


## Check

# Utilities
[ -z "$(which lsb_release)" ] && _gcfg_error 'config' 'Missing required utility (lsb_release)' && return 1
[ -z "$(which git)" ] && _gcfg_error 'config' 'Missing required utility (git)' && return 1
[ -z "$(which aptitude)" ] && _gcfg_error 'config' 'Missing required utility (aptitude)' && return 1
[ -z "$(which gcfg)" ] && _gcfg_error 'config' 'Missing required utility (gcfg)' && return 1

# Repository
[ -z "${GCFG_ROOT}" ] && export GCFG_ROOT=/etc/gcfg
GCFG_ROOT="$(_gcfg_path_canonical "${GCFG_ROOT}")" || return $?
export GCFG_REPO_GIT="${GCFG_ROOT}/git"
export GCFG_REPO_ORIG="${GCFG_ROOT}/original"
export GCFG_REPO_FLAG="${GCFG_ROOT}/flag"
export GCFG_REPO_PKGLIST="${GCFG_ROOT}/pkglist"
if [ ! -e "${GCFG_ROOT}" -o ! -e "${GCFG_REPO_GIT}/.git" -o ! -e "${GCFG_REPO_ORIG}" -o ! -e "${GCFG_REPO_FLAG}" -o ! -e "${GCFG_REPO_PKGLIST}" ]; then
  _gcfg_warning 'config' 'Missing or incomplete configuration repository' "${GCFG_ROOT}"
  _gcfg_confirm 'config' 'Do you want to create/fix this configuration repository ?'
  if [ "$(_gcfg_answer 'y/n')" == 'y' ]; then
    [ ! -e "${GCFG_ROOT}" ] && mkdir -p "${GCFG_ROOT}"
    [ ! -e "${GCFG_REPO_GIT}" ] && mkdir "${GCFG_REPO_GIT}"
    if [ ! -e "${GCFG_REPO_GIT}/.git" ]; then
      late_exit=0
      _gcfg_pushd || return $?
      git init
      [ $? -ne 0 ] && late_exit=$? && _gcfg_error 'config' 'Failed to initialize GIT' "${GCFG_REPO_GIT}/.git"
      _gcfg_popd || return $?
      [ ${late_exit} -ne 0 ] && return ${late_exit}
    fi
    [ ! -e "${GCFG_REPO_ORIG}" ] && mkdir "${GCFG_REPO_ORIG}"
    [ ! -e "${GCFG_REPO_FLAG}" ] && mkdir "${GCFG_REPO_FLAG}"
    if [ ! -e "${GCFG_REPO_PKGLIST}" ]; then
      aptitude search --disable-columns --display-format '%p' --sort 'name' '?and(?installed,?not(?automatic))' > "${GCFG_REPO_PKGLIST}"
      [ $? -ne 0 ] && _gcfg_error 'config' 'Failed to initialize packages listing' "${GCFG_REPO_PKGLIST}" && return 1
      gcfg new --batch "${GCFG_REPO_PKGLIST}" "${GCFG_REPO_PKGLIST}" || return 1
    fi
  fi
fi


## Environment
export GCFG_DISTRIB="$(lsb_release -s -i)"
export GCFG_DISTVER="$(lsb_release -s -c)"

